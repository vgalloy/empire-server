pipeline {
    agent any

    stages {
        stage('Init volume') {
            steps {
                sh 'rm -rf *'
                sh '''
                    if [ -e $(docker volume list -q -f "name=empire-source-volume") ]
                    then
                    	docker volume create --name=empire-source-volume
                    	docker run \
                            --rm \
                            -v empire-source-volume:/git \
                            alpine/git clone https://github.com/vgalloy/empire-server.git
                    fi
                '''
            }
        }

        stage('Git fetch') {
            steps {
                sh '''
                    docker run \
                        --rm \
                        -v empire-source-volume:/home/ \
                        -w /home/empire-server \
                        alpine/git fetch
                    docker run \
                        --rm \
                        -v empire-source-volume:/home/ \
                        -w /home/empire-server \
                        alpine/git checkout --force origin/master
                '''
            }
        }

        stage('Maven init builder') {
            steps {
                sh '''
                    if [ -e $(docker container list -aqf "name=empire-server-maven-builder-java8") ]
                    then
                        docker container create \
                            --name=empire-server-maven-builder-java8 \
                            -v empire-source-volume:/src/maven \
                            -w /src/maven/empire-server \
                            maven:3.5.2 mvn clean install
                    fi
                '''
            }
        }

        stage('Maven clean install') {
            steps {
                sh 'docker container start -a empire-server-maven-builder-java8'
            }
        }

        stage('Gradle init builder') {
            steps {
                sh '''
                    if [ -e $(docker container list -aqf "name=empire-server-gradle-builder-java8") ]
                    then
                        docker container create \
                            --name=empire-server-gradle-builder-java8 \
                            -v empire-source-volume:/home/gradle \
                            -w /home/gradle/empire-server \
                            java:openjdk-8 ./gradlew build --project-cache-dir=/home/gradle-cache
                    fi
                '''
            }
        }

        stage('Gradle build') {
            steps {
                sh 'docker container start -a empire-server-gradle-builder-java8'
            }
        }

        stage('Extract jar') {
            steps {
                sh '''
                    if [ ! -e $(docker container list -aqf "name=empire-volume-extractor") ]
                    then
                        docker rm -f empire-volume-extractor
                    fi    
                    docker run \
                        --name=empire-volume-extractor \
                        -v empire-source-volume:/home/ \
                        ubuntu cp -r /home/empire-server /save
                    docker container cp empire-volume-extractor:/save empire-server
                '''
            }
            post {
                success {
                    archive "empire-server/empire-webservice/build/libs/empire-server.jar"
                    archive "empire-server/config/docker/Dockerfile"
                }
            }
        }

        stage('Docker image creation') {
            steps {
                unarchive mapping: ['empire-server/empire-webservice/build/libs/empire-server.jar': 'target/empire-server.jar']
                unarchive mapping: ['empire-server/config/docker/Dockerfile': 'config/docker/Dockerfile']
                withCredentials([usernamePassword(credentialsId: 'docker_credential', usernameVariable: 'DOCKER_LOGIN', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh '''
                        docker build -f config/docker/Dockerfile -t registry.vgalloy.com/empire-server:1.$BUILD_NUMBER .
                        docker tag registry.vgalloy.com/empire-server:1.$BUILD_NUMBER registry.vgalloy.com/empire-server:latest
                        docker login registry.vgalloy.com -p $DOCKER_PASSWORD -u $DOCKER_LOGIN
                        docker push registry.vgalloy.com/empire-server:1.$BUILD_NUMBER
                        docker push registry.vgalloy.com/empire-server:latest
                        docker logout registry.vgalloy.com
                    '''
                }
            }
        }

        stage('Deploy') {
            steps {
                sh "ssh ubuntu@api.empire.vgalloy.com container/empire/deploy.sh"
            }
        }
    }
}
