import net.jokubasdargis.buildtimer.BuildTimerPluginExtension

buildscript {
    dependencies {
        classpath 'net.jokubasdargis.buildtimer:gradle-plugin:0.3.0'
    }
}

plugins {
    // dependencyUpdates
    id 'com.github.ben-manes.versions' version '0.20.0'
    id 'net.researchgate.release' version '2.7.0'
    id 'com.github.sherter.google-java-format' version '0.8'
}

apply plugin: 'net.jokubasdargis.build-timer'

googleJavaFormat {
    toolVersion = '1.7'
}

buildTimer {
    reportAbove = 100L
    sort = BuildTimerPluginExtension.SortOrder.DESC
}

ext {
    javaVersion = '11'
    encoding = 'UTF-8'

    qualityConfigurationPath = 'empire-configuration/src/main/resources/quality'
    checkstyleVersion = '8.16'
    pmdVersion = '6.10.0'
    jacocoVersion = '0.8.2'

    springBootVersion = '2.1.2.RELEASE'
    springFoxVersion = '2.9.2'
    junitVersion = '5.3.1'
    mockitoVersion = '2.23.4'
}

allprojects {
    apply plugin: 'java-library'
    apply plugin: 'checkstyle'
    apply plugin: 'pmd'
    apply plugin: 'jacoco'

    group = 'com.vgalloy'

    repositories {
        mavenLocal()
        mavenCentral()
    }

    configurations {
        integrationTestCompile.extendsFrom testCompile
        integrationTestRuntime.extendsFrom testRuntime
    }

    sourceSets {
        integrationTest {
            java {
                compileClasspath += main.output + test.output
                runtimeClasspath += main.output + test.output
                srcDir file('src/integration-test/java')
            }
            resources.srcDir file('src/integration-test/resources')
        }
    }

    checkstyle {
        toolVersion = "$checkstyleVersion"
        configFile = rootProject.file("$qualityConfigurationPath/checkstyle/checkstyle.xml")
        checkstyleTest.enabled = false
        checkstyleIntegrationTest.enabled = false
    }

    tasks.withType(Checkstyle) {
        dependsOn ':googleJavaFormat'
    }

    pmd {
        toolVersion = "$pmdVersion"
        consoleOutput = true
        ruleSets = []
        ruleSetFiles = rootProject.files("$qualityConfigurationPath/pmd/pmd.xml")
        pmdTest.enabled = false
        pmdIntegrationTest.enabled = false
    }

    tasks.withType(JavaCompile) {
        sourceCompatibility = "$javaVersion"
        targetCompatibility = "$javaVersion"
        options.encoding = "$encoding"
        options.compilerArgs += [
                '-Xlint:all',
//                '-Werror'
        ]
    }

    tasks.withType(Test) {
        useJUnitPlatform()
        testLogging {
//            events "passed", "skipped", "failed"
        }
    }

    task integrationTest(type: Test) {
        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath
    }

    jacoco {
        toolVersion = "$jacocoVersion"
    }

    jacocoTestReport {
        dependsOn test
        dependsOn integrationTest

        reports {
            html.enabled = true
        }
        Set<File> reportFiles = new HashSet<>()
        File testReport = file("$buildDir/jacoco/test.exec")
        if (testReport.exists()) {
            reportFiles.add(testReport)
        }
        File integrationTestReport = file("$buildDir/jacoco/integrationTest.exec")
        if (integrationTestReport.exists()) {
            reportFiles.add(integrationTestReport)
        }
        executionData.from = reportFiles
    }

    integrationTest.mustRunAfter test
    check.dependsOn integrationTest
    check.dependsOn jacocoTestReport
}
