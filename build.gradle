plugins {
    // dependencyUpdates
    id 'com.github.ben-manes.versions' version '0.17.0'
    id 'net.researchgate.release' version '2.6.0'
}

ext {
    javaVersion = '1.8'
    encoding = 'UTF-8'
    checkstyleVersion = '8.8'

    springBootVersion = '1.5.10.RELEASE'
    springFoxVersion = '2.7.0'
    junitVersion = '4.12'
}

import java.util.concurrent.TimeUnit

// Log timings per task.
class TimingsListener implements TaskExecutionListener, BuildListener {
    private long startTime
    private timings = []

    @Override
    void beforeExecute(Task task) {
        startTime = System.nanoTime()
    }

    @Override
    void afterExecute(Task task, TaskState taskState) {
        def ms = TimeUnit.MILLISECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS);
        timings.add([ms, task.path])
        task.project.logger.warn "${task.path} took ${ms}ms"
    }

    @Override
    void buildFinished(BuildResult result) {
        println "Task timings:"
        for (timing in timings) {
            if (timing[0] >= 50) {
                printf "%7sms  %s\n", timing
            }
        }
    }

    @Override
    void buildStarted(Gradle gradle) {}

    @Override
    void projectsEvaluated(Gradle gradle) {}

    @Override
    void projectsLoaded(Gradle gradle) {}

    @Override
    void settingsEvaluated(Settings settings) {}
}

gradle.addListener new TimingsListener()

allprojects {
    apply plugin: 'java-library'
    apply plugin: 'checkstyle'
    apply plugin: 'pmd'
    apply plugin: 'findbugs'

    group = 'com.vgalloy'

    repositories {
        mavenLocal()
        mavenCentral()
    }

    checkstyle {
        toolVersion = "$checkstyleVersion"
        configFile = rootProject.file('config/checkstyle/checkstyle.xml')
        checkstyleTest.enabled = false
    }

    pmd {
        consoleOutput = true
        ruleSetFiles = rootProject.files('config/pmd/ruleset.xml')
        pmdTest.enabled = false
    }

    findbugs {
        excludeFilter = file("$rootProject.projectDir/config/findbugs/findbugs-exception-filter.xml")
        findbugsTest.enabled = false
    }

    compileJava {
        sourceCompatibility = "$javaVersion"
        targetCompatibility = "$javaVersion"
        options.encoding = "$encoding"
    }

    compileTestJava {
        sourceCompatibility = "$javaVersion"
        targetCompatibility = "$javaVersion"
        options.encoding = "$encoding"
    }

}
